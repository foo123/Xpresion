Xpresion.VERSION 1.0.0

==========================================
Expression: array("string")
Variables : []
Evaluator : $Fn->ary("string")
Data      : array(0) {
}

Result    : array(1) {
  [0]=>
  string(6) "string"
}

==========================================
Expression: array(["ar","ra","y"])
Variables : []
Evaluator : $Fn->ary(array("ar","ra","y"))
Data      : array(0) {
}

Result    : array(3) {
  [0]=>
  string(2) "ar"
  [1]=>
  string(2) "ra"
  [2]=>
  string(1) "y"
}

==========================================
Expression: str(2)
Variables : []
Evaluator : strval(2)
Data      : array(0) {
}

Result    : string(1) "2"

==========================================
Expression: str("2")
Variables : []
Evaluator : strval("2")
Data      : array(0) {
}

Result    : string(1) "2"

==========================================
Expression: int(2)
Variables : []
Evaluator : intval(2)
Data      : array(0) {
}

Result    : int(2)

==========================================
Expression: int("2")
Variables : []
Evaluator : intval("2")
Data      : array(0) {
}

Result    : int(2)

==========================================
Xpresion Error: Unknown token "hex2dec($this)" at hex2dec($this)
==========================================
Expression: 13
Variables : []
Evaluator : 13
==========================================
Expression: 1.32
Variables : []
Evaluator : 1.32
==========================================
Expression: -0.12
Variables : []
Evaluator : (-0.12)
==========================================
Expression: -3
Variables : []
Evaluator : (-3)
==========================================
Expression: ("1,2,3")+3
Variables : []
Evaluator : ("1,2,3".strval(3))
Data      : array(0) {
}

Result    : string(6) "1,2,33"

==========================================
Expression: "1,2,3"+3
Variables : []
Evaluator : ("1,2,3".strval(3))
Data      : array(0) {
}

Result    : string(6) "1,2,33"

==========================================
Expression: "1,2,3"+3+4
Variables : []
Evaluator : (("1,2,3".strval(3)).strval(4))
Data      : array(0) {
}

Result    : string(7) "1,2,334"

==========================================
Expression: [1,2,3]+3
Variables : []
Evaluator : $Fn->ary_merge(array(1,2,3),3)
Data      : array(0) {
}

Result    : array(4) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(3)
}

==========================================
Expression: -3+2
Variables : []
Evaluator : ((-3)+2)
Data      : array(0) {
}

Result    : int(-1)

==========================================
Expression: 1-3+2
Variables : []
Evaluator : ((1-3)+2)
Data      : array(0) {
}

Result    : int(0)

==========================================
Expression: 1+-3
Variables : []
Evaluator : (1+(-3))
Data      : array(0) {
}

Result    : int(-2)

==========================================
Expression: +1+3
Variables : []
Evaluator : (1+3)
Data      : array(0) {
}

Result    : int(4)

==========================================
Expression: 2*-1
Variables : []
Evaluator : (2*(-1))
==========================================
Expression: 2*(-1)
Variables : []
Evaluator : (2*(-1))
==========================================
Expression: 2^-1
Variables : []
Evaluator : pow(2,(-1))
==========================================
Expression: 2^(-1)
Variables : []
Evaluator : pow(2,(-1))
==========================================
Expression: 2^-1^3
Variables : []
Evaluator : pow(2,pow((-1),3))
==========================================
Expression: -2^-1^3
Variables : []
Evaluator : pow((-2),pow((-1),3))
==========================================
Expression: 2^(-1)^3
Variables : []
Evaluator : pow(2,pow((-1),3))
==========================================
Expression: sqrt(2)
Variables : []
Evaluator : sqrt(2)
Data      : array(0) {
}

Result    : float(1.4142135623731)

==========================================
Expression: $v
Variables : [v]
Evaluator : $Var["v"]
==========================================
Expression: $v.key.0.key
Variables : [v]
Evaluator : Xpresion::GET($Var["v"],array("key","0","key"))
Data      : array(1) {
  ["v"]=>
  object(stdClass)#242 (1) {
    ["key"]=>
    array(2) {
      [0]=>
      object(stdClass)#147 (1) {
        ["key"]=>
        string(7) "correct"
      }
      [1]=>
      string(3) "foo"
    }
  }
}

Result    : string(7) "correct"

==========================================
Expression: True
Variables : []
Evaluator : true
==========================================
Expression: "string"
Variables : []
Evaluator : "string"
==========================================
Expression: ["a","rra","y"]
Variables : []
Evaluator : array("a","rra","y")
==========================================
Expression: `^regex?`i
Variables : []
Evaluator : $Cache->re_1
==========================================
Expression: 0 == 1
Variables : []
Evaluator : (0==1)
==========================================
Expression: TRUE == False
Variables : []
Evaluator : (true==false)
==========================================
Expression: TRUE is False
Variables : []
Evaluator : (true===false)
==========================================
Expression: 1+2
Variables : []
Evaluator : (1+2)
==========================================
Expression: 1+2+3
Variables : []
Evaluator : ((1+2)+3)
==========================================
Expression: 1+2*3
Variables : []
Evaluator : (1+(2*3))
==========================================
Expression: 1*2+3
Variables : []
Evaluator : ((1*2)+3)
==========================================
Expression: 1*2*3
Variables : []
Evaluator : ((1*2)*3)
==========================================
Expression: 1+2/3
Variables : []
Evaluator : (1+(2/3))
==========================================
Expression: 1*2/3
Variables : []
Evaluator : ((1*2)/3)
==========================================
Expression: 1^2
Variables : []
Evaluator : pow(1,2)
==========================================
Expression: 1^2^3
Variables : []
Evaluator : pow(1,pow(2,3))
==========================================
Expression: 1^(2^3)
Variables : []
Evaluator : pow(1,pow(2,3))
==========================================
Expression: (1^2)^3
Variables : []
Evaluator : pow(pow(1,2),3)
==========================================
Expression: ((1^2))^3
Variables : []
Evaluator : pow(pow(1,2),3)
==========================================
Expression: `^regex?`i matches "string"
Variables : []
Evaluator : $Fn->match("string",$Cache->re_1)
==========================================
Expression: `^regex?`i matches "string" and `^regex?`i matches "string2"
Variables : []
Evaluator : ($Fn->match("string",$Cache->re_1)&&$Fn->match("string2",$Cache->re_1))
==========================================
Expression: $v in ["a","b","c"]
Variables : [v]
Evaluator : $Fn->contains(array("a","b","c"),$Var["v"])
==========================================
Xpresion Error: Operator ":" expecting 1 prior argument(s) at 1 ? : (1+2) (3+4)
==========================================
Expression: 1 ? sum(1,2) : (3+4)
Variables : []
Evaluator : (1?$Fn->sum(1,2):(3+4))
==========================================
Expression: 1 ? 1+2 : (3+4)
Variables : []
Evaluator : (1?(1+2):(3+4))
==========================================
Expression: 1 ? (2+3) : 2 ? (3+4) : (4+5)
Variables : []
Evaluator : (1?(2+3):(2?(3+4):(4+5)))
==========================================
Expression: date("Y-m-d H:i:s")
Variables : []
Evaluator : date("Y-m-d H:i:s")
Data      : array(0) {
}

Result    : string(19) "2019-04-06 16:01:13"

==========================================
Expression: time()
Variables : []
Evaluator : time()
Data      : array(0) {
}

Result    : int(1554559273)

==========================================
Expression: date("Y-m-d H:i:s", time())
Variables : []
Evaluator : date("Y-m-d H:i:s",time())
==========================================
Expression: pow(1,pow(2,3))
Variables : []
Evaluator : pow(1,pow(2,3))
==========================================
Expression: pow(pow(2,3),4)
Variables : []
Evaluator : pow(pow(2,3),4)
==========================================
Expression: pow(pow(1,2),pow(2,3))
Variables : []
Evaluator : pow(pow(1,2),pow(2,3))
