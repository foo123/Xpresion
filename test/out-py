Xpresion Module loaded succesfully
Xpresion.VERSION 1.0.0

==========================================
Xpresion Error: Unknown token "math.pow(self)" at math.pow(self)
==========================================
Expression: 13
Variables : []
Evaluator : 13
==========================================
Expression: 1.32
Variables : []
Evaluator : 1.32
==========================================
Expression: -0.12
Variables : []
Evaluator : (-0.12)
==========================================
Expression: -3
Variables : []
Evaluator : (-3)
==========================================
Expression: ("1,2,3")+3
Variables : []
Evaluator : ("1,2,3"+str(3))
Data      : {}
Result    : '1,2,33'
==========================================
Expression: "1,2,3"+3
Variables : []
Evaluator : ("1,2,3"+str(3))
Data      : {}
Result    : '1,2,33'
==========================================
Expression: "1,2,3"+3+4
Variables : []
Evaluator : (("1,2,3"+str(3))+str(4))
Data      : {}
Result    : '1,2,334'
==========================================
Expression: [1,2,3]+3
Variables : []
Evaluator : Fn.ary_merge([1,2,3],3)
Data      : {}
Result    : [1, 2, 3, 3]
==========================================
Expression: -3+2
Variables : []
Evaluator : ((-3)+2)
Data      : {}
Result    : -1
==========================================
Expression: 1-3+2
Variables : []
Evaluator : ((1-3)+2)
Data      : {}
Result    : 0
==========================================
Expression: 1+-3
Variables : []
Evaluator : (1+(-3))
Data      : {}
Result    : -2
==========================================
Expression: +1+3
Variables : []
Evaluator : (1+3)
Data      : {}
Result    : 4
==========================================
Expression: 2*-1
Variables : []
Evaluator : (2*(-1))
==========================================
Expression: 2*(-1)
Variables : []
Evaluator : (2*(-1))
==========================================
Expression: 2^-1
Variables : []
Evaluator : (2**(-1))
==========================================
Expression: 2^(-1)
Variables : []
Evaluator : (2**(-1))
==========================================
Expression: 2^-1^3
Variables : []
Evaluator : (2**((-1)**3))
==========================================
Expression: -2^-1^3
Variables : []
Evaluator : ((-2)**((-1)**3))
==========================================
Expression: 2^(-1)^3
Variables : []
Evaluator : (2**((-1)**3))
==========================================
Expression: sqrt(2)
Variables : []
Evaluator : math.sqrt(2)
Data      : {}
Result    : 1.4142135623730951
==========================================
Expression: $v
Variables : [v]
Evaluator : Var["v"]
==========================================
Expression: $v.key.0.key
Variables : [v]
Evaluator : Xpresion.GET(Var["v"],["key","0","key"])
Data      : {'v': <__main__.TestObject object at 0x021E64F0>}
Result    : 'correct'
==========================================
Expression: True
Variables : []
Evaluator : True
==========================================
Expression: "string"
Variables : []
Evaluator : "string"
==========================================
Expression: ["a","rra","y"]
Variables : []
Evaluator : ["a","rra","y"]
==========================================
Expression: `^regex?`i
Variables : []
Evaluator : Cache["re_1"]
==========================================
Expression: 0 == 1
Variables : []
Evaluator : (0==1)
==========================================
Expression: TRUE == False
Variables : []
Evaluator : (True==False)
==========================================
Expression: TRUE is False
Variables : []
Evaluator : (True is False)
==========================================
Expression: 1+2
Variables : []
Evaluator : (1+2)
==========================================
Expression: 1+2+3
Variables : []
Evaluator : ((1+2)+3)
==========================================
Expression: 1+2*3
Variables : []
Evaluator : (1+(2*3))
==========================================
Expression: 1*2+3
Variables : []
Evaluator : ((1*2)+3)
==========================================
Expression: 1*2*3
Variables : []
Evaluator : ((1*2)*3)
==========================================
Expression: 1+2/3
Variables : []
Evaluator : (1+(2/3))
==========================================
Expression: 1*2/3
Variables : []
Evaluator : ((1*2)/3)
==========================================
Expression: 1^2
Variables : []
Evaluator : (1**2)
==========================================
Expression: 1^2^3
Variables : []
Evaluator : (1**(2**3))
==========================================
Expression: 1^(2^3)
Variables : []
Evaluator : (1**(2**3))
==========================================
Expression: (1^2)^3
Variables : []
Evaluator : ((1**2)**3)
==========================================
Expression: ((1^2))^3
Variables : []
Evaluator : ((1**2)**3)
==========================================
Expression: `^regex?`i matches "string"
Variables : []
Evaluator : Fn.match("string",Cache["re_1"])
==========================================
Expression: `^regex?`i matches "string" and `^regex?`i matches "string2"
Variables : []
Evaluator : (Fn.match("string",Cache["re_1"]) and Fn.match("string2",Cache["re_1"]))
==========================================
Expression: $v in ["a","b","c"]
Variables : [v]
Evaluator : Fn.contains(["a","b","c"],Var["v"])
==========================================
Xpresion Error: Operator ":" expecting 1 prior argument(s) at 1 ? : (1+2) (3+4)
==========================================
Expression: 1 ? sum(1,2) : (3+4)
Variables : []
Evaluator : (Fn.sum(1,2) if 1 else (3+4))
==========================================
Expression: 1 ? 1+2 : (3+4)
Variables : []
Evaluator : ((1+2) if 1 else (3+4))
==========================================
Expression: 1 ? (2+3) : 2 ? (3+4) : (4+5)
Variables : []
Evaluator : ((2+3) if 1 else ((3+4) if 2 else (4+5)))
==========================================
Expression: date("Y-m-d H:i:s")
Variables : []
Evaluator : Fn.date("Y-m-d H:i:s")
Data      : {}
Result    : '2019-03-20 11:53:57'
==========================================
Expression: time()
Variables : []
Evaluator : Fn.time()
Data      : {}
Result    : 1553075637
==========================================
Expression: date("Y-m-d H:i:s", time())
Variables : []
Evaluator : Fn.date("Y-m-d H:i:s",Fn.time())
==========================================
Expression: pow(1,pow(2,3))
Variables : []
Evaluator : Fn.pow(1,Fn.pow(2,3))
==========================================
Expression: pow(pow(2,3),4)
Variables : []
Evaluator : Fn.pow(Fn.pow(2,3),4)
==========================================
Expression: pow(pow(1,2),pow(2,3))
Variables : []
Evaluator : Fn.pow(Fn.pow(1,2),Fn.pow(2,3))
