Xpresion.VERSION 0.5

Expression: 13
Variables : []
Evaluator : 13
Expression: 1.32
Variables : []
Evaluator : 1.32
Expression: -0.12
Variables : []
Evaluator : (-0.12)
Expression: -3
Variables : []
Evaluator : (-3)
Expression: ("1,2,3")+3
Variables : []
Evaluator : ("1,2,3"+String(3))
Data      : {}
Result    : "1,2,33"
Expression: "1,2,3"+3
Variables : []
Evaluator : ("1,2,3"+String(3))
Data      : {}
Result    : "1,2,33"
Expression: "1,2,3"+3+4
Variables : []
Evaluator : (("1,2,3"+String(3))+String(4))
Data      : {}
Result    : "1,2,334"
Expression: [1,2,3]+3
Variables : []
Evaluator : Fn.ary_merge([1,2,3],3)
Data      : {}
Result    : [1,2,3,3]
Expression: -3+2
Variables : []
Evaluator : ((-3)+2)
Data      : {}
Result    : -1
Expression: 1-3+2
Variables : []
Evaluator : ((1-3)+2)
Data      : {}
Result    : 0
Expression: 1+-3
Variables : []
Evaluator : (1+(-3))
Data      : {}
Result    : -2
Expression: +1+3
Variables : []
Evaluator : (1+3)
Data      : {}
Result    : 4
Expression: 2*-1
Variables : []
Evaluator : (2*(-1))
Expression: 2*(-1)
Variables : []
Evaluator : (2*(-1))
Expression: 2^-1
Variables : []
Evaluator : Math.pow(2,(-1))
Expression: 2^(-1)
Variables : []
Evaluator : Math.pow(2,(-1))
Expression: 2^-1^3
Variables : []
Evaluator : Math.pow(2,Math.pow((-1),3))
Expression: -2^-1^3
Variables : []
Evaluator : Math.pow((-2),Math.pow((-1),3))
Expression: 2^(-1)^3
Variables : []
Evaluator : Math.pow(2,Math.pow((-1),3))
Expression: $v
Variables : [v]
Evaluator : Var["v"]
Expression: True
Variables : []
Evaluator : true
Expression: "string"
Variables : []
Evaluator : "string"
Expression: ["a","rra","y"]
Variables : []
Evaluator : ["a","rra","y"]
Expression: `^regex?`i
Variables : []
Evaluator : Cache.re_1
Expression: 0 == 1
Variables : []
Evaluator : (0==1)
Expression: TRUE == False
Variables : []
Evaluator : (true==false)
Expression: 1+2
Variables : []
Evaluator : (1+2)
Expression: 1+2+3
Variables : []
Evaluator : ((1+2)+3)
Expression: 1+2*3
Variables : []
Evaluator : (1+(2*3))
Expression: 1*2+3
Variables : []
Evaluator : ((1*2)+3)
Expression: 1*2*3
Variables : []
Evaluator : ((1*2)*3)
Expression: 1+2/3
Variables : []
Evaluator : (1+(2/3))
Expression: 1*2/3
Variables : []
Evaluator : ((1*2)/3)
Expression: 1^2
Variables : []
Evaluator : Math.pow(1,2)
Expression: 1^2^3
Variables : []
Evaluator : Math.pow(1,Math.pow(2,3))
Expression: 1^(2^3)
Variables : []
Evaluator : Math.pow(1,Math.pow(2,3))
Expression: (1^2)^3
Variables : []
Evaluator : Math.pow(Math.pow(1,2),3)
Expression: ((1^2))^3
Variables : []
Evaluator : Math.pow(Math.pow(1,2),3)
Expression: `^regex?`i matches "string"
Variables : []
Evaluator : Cache.re_1.test("string")
Expression: `^regex?`i matches "string" and `^regex?`i matches "string2"
Variables : []
Evaluator : (Cache.re_1.test("string")&&Cache.re_1.test("string2"))
Expression: ["a","b","c"] has $v
Variables : [v]
Evaluator : (-1<["a","b","c"].indexOf(Var["v"]))
Expression: $v in ["a","b","c"]
Variables : [v]
Evaluator : (-1<["a","b","c"].indexOf(Var["v"]))
Expression: 1 ? (2+3) : (3+4)
Variables : []
Evaluator : (1?(2+3):(3+4))
Expression: 1 ? (2+3) : 2 ? (3+4) : (4+5)
Variables : []
Evaluator : (1?(2+3):(2?(3+4):(4+5)))
